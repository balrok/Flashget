# -*- coding: utf-8 -*-
# YOU NEED TO COPY THIS FILE TO config.py so that the program uses those values here
import os
from tools.defines import Log
from tools.defines import Quality

# caches are only used temporarily - if a download fails, sometimes it can help to delete
# all cachedata - the only negative point in deleting all cachedata is, that the program may be a bit slower on next start
cache_dir = 'cache'             # here we write normal html-downloads
cache_dir_for_flv = 'cache2'    # here we write flashdownloads

flash_dir = 'flash' # all finished flashdownloads go in this directory and will be deleted from the cachedir
flash_quality = Quality.HIGH # sometimes the videopages offer different qualities - don't change the quality in the middle of a download - the resulting movie will be broken then


log = {
    'file': { # defines stuff on the file-level
        'dir': 'log', # the folder where we write log-files
        'types': Log.ALL,                  # binary connect all logtypes which you want logged always
        'extra_file': {'url': 'url' },          # all url-logs will get logged in an extra file name.type (for example log/url.error)
        'extra_types': {'Main': Log.ALL}         # log everything from main
    },
    'display': { # defines stuff which should get displayed
        'types': Log.ALL,
        'extra_types': {}
    }
}



dl_instances = 5  # how many parallel downloads you will start



# keepalive is used for http-requests where we can reuse an already opened connection to a server, which results in speed-improvements
# this should work ok, but if you get strange results you can disable it too
keepalive = True


# VALUES below this aren't interesting for you
win_mgr = None
megavideo_wait = 0
link = None # you can set a default url as starturl.. but commandline-option will overwrite this var

dir_list = {'cache_dir': cache_dir, 'flash_dir':flash_dir, 'log_dir':log['file']['dir']}
error = 0
for i in dir_list:
    path = dir_list[i]
    if os.path.isdir(path) is False:
        os.makedirs(path)
    if not os.access(path, os.W_OK):
        print i + 'needs a writeable path, but your %s isn\'t writeable please edit config.py' % path
        error = 1
if error == 1:
    import sys
    sys.exit(1)
